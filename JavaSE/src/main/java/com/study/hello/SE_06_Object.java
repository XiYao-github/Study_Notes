package com.study.hello;

/**
 * 面向对象
 * - 面向：拿/找
 * - 对象：东西
 * - 面向对象编程：拿/找东西过来编程解决问题。
 * - 面向对象：把现实世界中的事物全部看成一个一个的对象来解决问题的。(万物皆对象)
 * - 面向对象编程的好处：代码符合人类的思维习惯，编程程序更简单，看程序更容易理解吧。
 * <p>
 * 类与对象
 * - 类是抽象的，概念的，代表一类事物，比如人类，动物类，即是数据类型。
 * - 对象是具体的，实际的，代表一个具体事物，即是实例。
 * - 类是对象的模板，对象是类的一个个体，对应一个实例。
 * <p>
 * 设计类
 * - 类名首字母建议大写，且有意义，满足“驼峰模式”。
 * - 一个Java文件中可以定义多个class类，但只能一个类是public修饰，而且public修饰的类名必须成为代码文件名。
 * - 实际开发中建议一个Java文件只定义一个类。
 */
public class SE_06_Object {
    public static void main(String[] args) {
        // new出来的对象在堆内存中，对象中存储的是对象在堆内存中的地址信息，每个对象彼此不冲突！
        // 使用对象：必须先设计类，才能创建对象并使用
        // 创建对象：类名 对象名 = new 类名();
        Obj obj = new Obj();
        // 访问属性：对象.成员变量；
        String name = obj.name;
        System.out.print(name);
        // 访问行为：对象.成员方法(…)；
        obj.call();
    }
}

/*public class 类名 {
    1、成员变量(Field)：(代表属性，一般是名词)如：姓名、年龄。
    2、成员方法(Method)：(代表行为，一般是动词)如：学习、吃饭、睡觉。
    3、构造器(Constructor)：初始化一个类的对象返回。
    4、代码块(CodeBlock)：构造器的补充。
    5、内部类(InnerClass)：类/方法的内部嵌套了一个类。
}*/
class Obj {
    // 成员变量(完整定义格式)：
    // 修饰符 数据类型 变量名称 = 初始化值；一般无需指定初始化值，存在默认值。
    public String name = "张三";

    // 成员方法(完整定义格式)：
    /*修饰符 返回值类型 方法名(形参列表) {
        执行代码...;
        return 返回值;
    }*/
    public void call() {
        /*               成员变量                    局部变量
           类中位置不同    类中，方法外                 常见于方法中
           初始化值不同    有默认值，无需初始化           没有默认值，使用之前需要完成赋值
           内存位置不同    堆内存                      栈内存
           生命周期不同    随着对象的创建而存在/消失      随着方法的调用而存在/消失
           作用域         随着对象的创建而存在/消失      所属代码块的大括号内
        */
        //局部变量：没有默认值，使用之前需要完成赋值
        String name = "李四";
        System.out.println("正在调用方法！！！");
    }

    /**
     * 构造器
     * - 定义在类中的，初始化类的对象，并返回对象的地址。
     * - 构造器的修饰符可以默认，也可以是(public，protected，默认，private)。
     * - 构造器的方法名和类名字必须一样，没有返回值，参数列表和成员方法一样的规则。
     * - 构造器是完成对象的初始化，并不是创建对象，创建对象(new)时，系统会自动调用该类的构造方法。
     * - 任何类定义出来，默认就自带了无参数构造器，写不写都有。
     * - 一旦定义了有参数构造器，那么无参数构造器就没有了，如果还想用无参数构造器，此时就需要自己手写一个无参数构造器了。
     */
    // 构造器(完整定义格式)：
    /*修饰符 类名(形参列表){
        执行代码...;
    }*/
    // 无参数构造器(默认存在的)：初始化对象时，成员变量的数据均采用默认值。
    public Obj() {
    }

    /**
     * this
     * - 出现在构造器和成员方法中，代表当前对象的地址，可以访问当前对象的成员变量和成员方法。
     * - 如果访问的变量和方法在当前对象没有找到，会向上到父类继续寻找，追溯到Object类还没找到会报错。
     * - 出现在构造器中访问本类构器，必须在兄弟构造器的第一行，不可互相调用构造器。
     * - 作用是解决对象的成员变量与方法内部变量的名称一样时，导致访问冲突问题的。
     */
    // 有参数构造器：在初始化对象的时候，同时可以接收参数为对象进行赋值。
    public Obj(String name) {
        this();
        this.name = name;
    }

}
